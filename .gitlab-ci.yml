stages:
  - test
  - package
  - publish

sast:
  stage: test
include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/SAST-IaC.latest.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml

ruff-lint:
  stage: test
  image: docker.io/library/python:3.12
  before_script:
    - pip install ruff
  script:
    - ruff check example.py yandexgptapi/
  only:
    - merge_requests
    - main
    - develop
    - tags

sonarqube-check:
  stage: test
  image:
    name: docker.io/sonarsource/sonar-scanner-cli:5
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  only:
    - merge_requests
    - main
    - develop

sonarqube-vulnerability-report:
  stage: test
  dependencies:
    - sonarqube-check
  image: docker.io/library/alpine:latest
  before_script:
    - apk update
    - apk add --no-cache curl
  script:
    - 'curl -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=vapronva_yandex-gpt-api-client-python_AY0uBl-lkkskFlz-JmAC&branch=${CI_COMMIT_BRANCH}&pullRequest=${CI_MERGE_REQUEST_IID}" -o gl-sast-sonar-report.json'
  allow_failure: true
  only:
    - merge_requests
    - main
    - develop
  artifacts:
    expire_in: 1 day
    reports:
      sast: gl-sast-sonar-report.json

scanmycode-analysis-starter:
  stage: test
  image: docker.io/library/alpine:latest
  before_script:
    - apk update
    - apk add --no-cache curl
  script:
    - curl -X POST "${SCANMYCODE_WEBHOOK_URL}"
  only:
    - merge_requests
    - main
    - develop

build-package:
  stage: package
  image: docker.io/library/python:3.12
  before_script:
    - pip install setuptools>=69 build wheel
  script:
    - python -m build
  only:
    - merge_requests
    - main
    - develop
    - tags
  artifacts:
    when: on_success
    expire_in: 180 days
    paths:
      - dist/

publish-local-pypi:
  stage: publish
  image: docker.io/library/python:3.12
  dependencies:
    - build-package
  before_script:
    - pip install twine
  script:
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
  only:
    - tags

