stages:
  - test
  - package
  - publish

sast:
  stage: test
include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/SAST-IaC.latest.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml

ruff-check:
  stage: test
  image: docker.io/library/python:3.12
  before_script:
    - pip install ruff
  script:
    - ruff check ./example.py ./yafma/

sonarqube-check:
  stage: test
  image:
    name: docker.io/sonarsource/sonar-scanner-cli:5
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  script:
    - sonar-scanner
  rules:
    - if: $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG == null
      allow_failure: true

sonarqube-vulnerability-report:
  stage: test
  needs:
    - job: sonarqube-check
      artifacts: true
  image: docker.io/library/alpine:latest
  before_script:
    - apk update
    - apk add --no-cache curl
  script:
    - 'curl -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=vapronva_yandex-gpt-api-client-python_AY0uBl-lkkskFlz-JmAC&branch=${CI_COMMIT_BRANCH}&pullRequest=${CI_MERGE_REQUEST_IID}" -o gl-sast-sonar-report.json'
  artifacts:
    reports:
      sast: gl-sast-sonar-report.json
  rules:
    - if: $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG == null
      allow_failure: true

scanmycode-analysis-starter:
  stage: test
  image: docker.io/library/alpine:latest
  before_script:
    - apk update
    - apk add --no-cache curl
  script:
    - curl -X POST "${SCANMYCODE_WEBHOOK_URL}"
  rules:
    - if: $CI_COMMIT_TAG == null

build-package:
  stage: package
  image: docker.io/library/python:3.12
  before_script:
    - pip install 'setuptools>=69,<70' 'build>=1,<2' 'wheel>=0.43,<0.44'
  script:
    - python -m build
  rules:
    - if: $CI_COMMIT_TAG == null && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG != null && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG == null
      allow_failure: true
  artifacts:
    when: on_success
    expire_in: 180 days
    paths:
      - dist/

publish-local-pypi:
  stage: publish
  image: docker.io/library/python:3.12
  needs:
    - job: build-package
      artifacts: true
  before_script:
    - pip install twine
  script:
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*
  rules:
    - if: $CI_COMMIT_TAG != null && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
